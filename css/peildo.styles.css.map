{"version":3,"file":"peildo.styles.css","sources":["peildo.styles.scss","libraries/guff/guff.scss"],"sourcesContent":["\n@import 'guff';\n.footer-logo h3 {\n  color: #f6dcbb;\n  text-transform: uppercase;\n  font-size: 16px;\n  margin-top: 1em;\n  margin-bottom: 1em;\n}\n.footer-logos {\n  padding-bottom: 1em;\n}\nfooter .menu a {\n  color: #f6dcbb;\n}\n\n.lp-grid {\n  @include container;\n\n  max-width: 100%;\n}\n\n.front {\n  .field--name-body {\n    @include span(5);\n    p {\n      font-size: 1.2em;\n    }\n  }\n  .field--name-slideshow-view {\n    @include span(7);\n  }\n}\n//slideshow\n.slideshow {\n  border: 1px solid #ccc;\n  padding: 4px;\n  font-size: 1.2em;\n}\n.page-islandora-search .l-content {\n  width: 100%;\n\n}\n.collection-grid {\n  width:100%;\n  .collection-item {\n  @include span(4);\n}\n}\n","// ###Reset\n\n// Mixin Reset\n@mixin reset(){\n\n  // Reset all browser styles & set font-size to 100%\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n\n  // Set HTML5 elements to block\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, main, menu, nav, section {\n    display: block;\n  }\n\n  // Remove built in list styling\n  ol, ul {\n    list-style: none;\n  }\n\n  // Remove link underlining\n  a {\n    text-decoration: none;\n  }\n\n  // Normalize block quotes\n  blockquote, q {\n    quotes: none;\n  }\n\n  // Remove pseudo elements\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n\n  // Normalize tables\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n\n  // Global border-box\n  * {\n    @include box-sizing(border-box);\n  }\n\n}\n// ###Settings\n\n// Set base font size\n$rem-base: 16px !default;\n// Set line height ratio base\n$line-height-base: 26px !default;\n// Vertical rhythm ratio\n$type-rhythm-ratio: 1.14 !default;\n// Desktop Media Query\n$desktop: \"(min-width: 1024px)\" !default;\n// Tablet Media Query\n$tablet: \"(min-width: 768px) and (max-width: 1023px)\" !default;\n// Mobile Media Query\n$mobile: \"(max-width: 767px)\" !default;\n// Set Grid Column Count\n$grid-columns: 12 !default;\n// Set Grid Gutter (as px)\n$grid-gutter: 20px !default;\n// Set Grid Padding (as px)\n$grid-padding: 20px !default;\n// Set Grid Max Width (as px)\n$grid-max-width: 1024px !default;\n// ###Functions\n\n// Strips unit suffix from value\n@function _strip-unit($num) {\n  @if type-of($num) != \"number\" {\n    @warn \"num: #{$num} is not a number\";\n    @return null;\n  }\n  @return $num / ($num * 0 + 1);\n}\n\n// Converts to rem, utility for rem-calc\n@function _convert-to-rem($value, $base-value: $rem-base)  {\n  @if type-of($value) != \"number\" {\n    @warn \"value: #{$value} is not a number\";\n    @return null;\n  }\n  @if type-of($base-value) != \"number\" {\n    @warn \"base-value: #{$base-value} is not a number\";\n    @return null;\n  }\n  $value: _strip-unit($value) / _strip-unit($base-value) * 1rem;\n  @if (_strip-unit($value) == 0) { $value: 0; } // Turn 0rem into 0\n  @return $value;\n}\n\n// Calculates rem value from number\n@function rem-calc($values, $base-value: $rem-base) {\n  @if type-of($values) != \"number\" {\n    @warn \"values: #{$values} is not a number\";\n    @return null;\n  }\n  @if type-of($base-value) != \"number\" {\n    @warn \"base-value: #{$base-value} is not a number\";\n    @return null;\n  }\n  $max: length($values);\n  @if $max == 1 { @return _convert-to-rem(nth($values, 1), $base-value); }\n  $remValues: ();\n  @for $i from 1 through $max {\n    $remValues: append($remValues, _convert-to-rem(nth($values, $i), $base-value));\n  }\n  @return $remValues;\n}\n\n// Gets grid column width\n@function span($cols: 4) {\n  @if type-of($cols) != \"number\" {\n    @warn \"cols: #{$cols} is not a number\";\n    @return null;\n  }\n  @if type-of($grid-columns) != \"number\" {\n    @warn \"grid-columns: #{$grid-columns} is not a number\";\n    $valid: false;\n  }\n  @return percentage($cols/$grid-columns);\n}\n// ###Mixins\n\n// Sets container styles\n@mixin container {\n  $valid: true;\n  @if type-of($grid-max-width) != \"number\" {\n    @warn \"grid-max-width: #{$grid-max-width} is not a number\";\n    $valid: false;\n  }\n  @if type-of($rem-base) != \"number\" {\n    @warn \"rem-base: #{$rem-base} is not a number\";\n    $valid: false;\n  }\n  @if $valid == true {\n    width: 100%;\n    max-width: $grid-max-width;\n    @include clear;\n  }\n}\n\n// Sets col container styles\n@mixin col-container {\n  $valid: true;\n  @if type-of($grid-max-width) != \"number\" {\n    @warn \"grid-max-width: #{$grid-max-width} is not a number\";\n    $valid: false;\n  }\n  @if type-of($rem-base) != \"number\" {\n    @warn \"rem-base: #{$rem-base} is not a number\";\n    $valid: false;\n  }\n  @if $valid == true {\n    width: 100%;\n    text-align: justify !important;\n    text-justify: distribute-all-lines;\n    font-size: 0 !important;\n    max-width: $grid-max-width;\n    & > * {\n      text-align: left;\n      font-size: rem-calc($rem-base);\n    }\n    &:after {\n      content: '';\n      display: inline-block;\n      width: 100%;\n    }\n  }\n}\n\n// Sets grid column width\n@mixin span($cols: 4, $padding: true) {\n  $valid: true;\n  @if type-of($cols) != \"number\" {\n    @warn \"cols: #{$cols} is not a number\";\n    $valid: false;\n  }\n  @if type-of($padding) != \"bool\" {\n    @warn \"padding: #{$padding} is not a boolean\";\n    $valid: false;\n  }\n  @if type-of($grid-columns) != \"number\" {\n    @warn \"grid-columns: #{$grid-columns} is not a number\";\n    $valid: false;\n  }\n  @if type-of($grid-padding) != \"number\" {\n    @warn \"grid-padding: #{$grid-padding} is not a number\";\n    $valid: false;\n  }\n  @if $valid == true {\n    $column-width: $cols / $grid-columns;\n    @if $padding != false {\n    padding-left: $grid-padding;\n    padding-right: $grid-padding;\n    }\n    width: percentage($column-width);\n    float: left;\n  }\n}\n\n// Sets grid column width (with gutter)\n@mixin col($span: 4) {\n  $valid: true;\n  @if type-of($span) != \"number\" {\n    @warn \"span: #{$span} is not a number\";\n    $valid: false;\n  }\n  @if type-of($grid-max-width) != \"number\" {\n    @warn \"grid-max-width: #{$grid-max-width} is not a number\";\n    $valid: false;\n  }\n  @if type-of($grid-columns) != \"number\" {\n    @warn \"grid-columns: #{$grid-columns} is not a number\";\n    $valid: false;\n  }\n  @if type-of($grid-gutter) != \"number\" {\n    @warn \"grid-gutter: #{$grid-columns} is not a number\";\n    $valid: false;\n  }\n  @if $valid == true {\n    $column-width: 100% / $grid-columns;\n    $gutter: ($grid-gutter * 0.75) / $grid-max-width * 100;\n    $span-width: $span * $column-width;\n    width: $span-width - $gutter;\n    vertical-align: top;\n    display: inline-block;\n  }\n}\n\n// Sets grid offet margin\n@mixin offset($cols: 4) {\n  $valid: true;\n  @if type-of($cols) != \"number\" {\n    @warn \"cols: #{$cols} is not a number\";\n    $valid: false;\n  }\n  @if type-of($grid-columns) != \"number\" {\n    @warn \"grid-columns: #{$grid-columns} is not a number\";\n    $valid: false;\n  }\n  @if $valid == true {\n    margin-left: percentage($cols/$grid-columns);\n  }\n}\n\n// Wraps interior content in a media query\n@mixin breakpoint($querystring) {\n  $valid: true;\n  @if type-of($querystring) != \"string\" {\n    @warn \"querystring: #{$querystring} is not a string\";\n    $valid: false;\n  }\n  @if $valid == true {\n    @media #{$querystring} {\n      @content;\n    }\n  }\n}\n\n// Renders fully prefixed transistion\n@mixin transition ($property: 0.15s) {\n  $valid: false;\n  @if type-of($property) == \"string\" {\n    $valid: true;\n  }\n  @if type-of($property) == \"list\" {\n    $valid: true;\n  }\n  @if type-of($property) == \"number\" {\n    $valid: true;\n  }\n  @if $valid == true {\n    @include prefixer(transition, $property, webkit moz ms);\n  } @else {\n    @warn \"property: #{$property} is not a valid argument\";\n  }\n}\n\n// Renders fully prefixed transform\n@mixin transform($property: none) {\n  $valid: false;\n  @if type-of($property) == \"string\" {\n    $valid: true;\n  }\n  @if type-of($property) == \"list\" {\n    $valid: true;\n  }\n  @if $valid == true {\n    @include prefixer(transform, $property, webkit moz ms);\n  } @else {\n    @warn \"property: #{$property} is not a valid argument\";\n  }\n}\n\n// Renders fully prefixed box-sizing\n@mixin box-sizing ($box: border-box) {\n  $valid: true;\n  @if type-of($box) != \"string\" {\n    @warn \"box: #{$box} is not a string\";\n    $valid: false;\n  }\n  @if $valid == true {\n    @include prefixer(box-sizing, $box, webkit moz);\n  }\n}\n\n// Utility for prefixing mixins\n@mixin prefixer($property, $value, $prefixes: webkit moz) {\n  $valid: false;\n  @if type-of($property) == \"string\" {\n    $valid: true;\n  }\n  @if type-of($prefixes) == \"list\" {\n    $valid: true;\n  }\n  @if type-of($prefixes) == \"string\" {\n    $valid: true;\n  }\n  @if $valid == true {\n    @each $prefix in $prefixes {\n      #{\"-\" + $prefix + \"-\" + $property}: $value;\n    }\n    #{$property}: $value;\n  } @else {\n    @warn \"Invalid arguments supplied\";\n  }\n}\n\n// Sets ellipsis overflow\n@mixin ellipsis($width: 100%) {\n  $valid: true;\n  @if type-of($width) != \"number\" {\n    @warn \"width: #{$width} is not a number\";\n    $valid: false;\n  }\n  @if $valid == true {\n    display: inline-block;\n    max-width: $width;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n}\n\n// Clearfix include\n@mixin clear($extend: true) {\n  $valid: true;\n  @if type-of($extend) != \"bool\" {\n    @warn \"extend: #{$extend} is not a boolean\";\n    $valid: false;\n  }\n  @if $valid == true {\n    @if $extend {\n      @extend %clear;\n    }\n    @else {\n      #{'&'}:after {\n      content:\"\";\n      display:table;\n      clear:both;\n      }\n    }\n  }\n}\n\n// Placeholder for clear\n%clear:after {\n  content:\"\";\n  display:table;\n  clear:both;\n}\n\n// Text hider\n\n@mixin hide-text($extend: true) {\n  $valid: true;\n  @if type-of($extend) != \"bool\" {\n    @warn \"extend: #{$extend} is not a boolean\";\n    $valid: false;\n  }\n  @if $valid == true {\n    @if $extend {\n      @extend %hide-text;\n    }\n    @else {\n    overflow:hidden;\n    text-indent: 100%;\n    white-space: nowrap;\n    }\n  }\n}\n\n// Placeholder for hide-text\n%hide-text {\n  overflow:hidden;\n  text-indent: 100%;\n  white-space: nowrap;\n}\n\n// Inline List\n\n@mixin inline-list($float: true) {\n  $valid: true;\n  @if type-of($float) != \"bool\" {\n    @warn \"float: #{$float} is not a boolean\";\n    $valid: false;\n  }\n  @if $valid == true {\n    list-style-type:none;\n    padding:0;\n    margin:0;\n    overflow:hidden;\n    > li{\n        @if $float == true {\n        display:block;\n        float:left;\n      } @else {\n        display: inline-block;\n      }\n    }\n  }\n}\n// ###Typography\n\n// Safe Rem\n@mixin safe-rem($property: font-size, $num: 14){\n  $valid: true;\n  @if type-of($property) != \"string\" {\n    @warn \"property: #{$property} is not a string\";\n    $valid: false;\n  }\n  @if type-of($num) != \"number\" {\n    @warn \"num: #{$num} is not a number\";\n    $valid: false;\n  }\n  @if $valid == true {\n    #{$property}: #{_strip-unit($num)}px;\n    #{$property}: rem-calc($num);\n  }\n}\n\n// Typographic Rhythm Mixin\n@mixin type($rem-base: $rem-base,$line-height-base: $line-height-base, $type-rhythm-ratio: $type-rhythm-ratio){\n  $valid: true;\n  @if type-of($rem-base) != \"number\" {\n    @warn \"rem-base: #{$rem-base} is not a number\";\n    $valid: false;\n  }\n  @if type-of($line-height-base) != \"number\" {\n    @warn \"line-height: #{$line-height-base} is not a number\";\n    $valid: false;\n  }\n  @if type-of($type-rhythm-ratio) != \"number\" {\n    @warn \"type-rhythm-ratio: #{$type-rhythm-ratio} is not a number\";\n    $valid: false;\n  }\n  @if $valid == true {\n    // Scale type at $type-rhythm-ratio\n    $h6-size: round(_strip-unit($rem-base) * $type-rhythm-ratio);\n    $h5-size: round($h6-size * $type-rhythm-ratio);\n    $h4-size: round($h5-size * $type-rhythm-ratio);\n    $h3-size: round($h4-size * $type-rhythm-ratio);\n    $h2-size: round($h3-size * $type-rhythm-ratio);\n    $h1-size: round($h2-size * $type-rhythm-ratio);\n\n    @if unit($line-height-base) == \"px\" {\n      // Set line-height\n      body {\n        line-height: _strip-unit($line-height-base) / _strip-unit($rem-base);\n      }\n    } @else {\n      body {\n        line-height: $line-height-base;\n      }\n    }\n\n    // Set heading sizes to size variables\n    h1 {\n      @include safe-rem(font-size, $h1-size);\n    }\n\n    h2 {\n      @include safe-rem(font-size, $h2-size);\n    }\n\n    h3 {\n      @include safe-rem(font-size, $h3-size);\n    }\n\n    h4 {\n      @include safe-rem(font-size, $h4-size);\n    }\n\n    h5 {\n      @include safe-rem(font-size, $h5-size);\n    }\n\n    h6 {\n      @include safe-rem(font-size, $h6-size);\n    }\n\n    p {\n      @include safe-rem(font-size, $rem-base);\n    }\n  }\n}"],"names":[],"mappings":"AAgBA,ACuXA,QDvXQ,ACuXF,MAAM,CAAC;EACX,OAAO,EAAC,EAAE;EACV,OAAO,EAAC,KAAK;EACb,KAAK,EAAC,IAAI,GACX;;ADzYD,AAAA,YAAY,CAAC,EAAE,CAAC;EACd,KAAK,EAAE,OAAO;EACd,cAAc,EAAE,SAAS;EACzB,SAAS,EAAE,IAAI;EACf,UAAU,EAAE,GAAG;EACf,aAAa,EAAE,GAAG,GACnB;;AACD,AAAA,aAAa,CAAC;EACZ,cAAc,EAAE,GAAG,GACpB;;AACD,AAAA,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;EACb,KAAK,EAAE,OAAO,GACf;;AAED,AAAA,QAAQ,CAAC;ECgJL,KAAK,EAAE,IAAI;EACX,SAAS,EAzEI,MAAM;EDrErB,SAAS,EAAE,IAAI,GAChB;;AAED,AACE,MADI,CACJ,iBAAiB,CAAC;ECkMhB,YAAY,EAnID,IAAI;EAoIf,aAAa,EApIF,IAAI;EAsIf,KAAK,EAAE,SAAyB;EAChC,KAAK,EAAE,IAAI,GDjMZ;EANH,AAGI,MAHE,CACJ,iBAAiB,CAEf,CAAC,CAAC;IACA,SAAS,EAAE,KAAK,GACjB;;AALL,AAOE,MAPI,CAOJ,2BAA2B,CAAC;EC4L1B,YAAY,EAnID,IAAI;EAoIf,aAAa,EApIF,IAAI;EAsIf,KAAK,EAAE,SAAyB;EAChC,KAAK,EAAE,IAAI,GD9LZ;;AAGH,AAAA,UAAU,CAAC;EACT,MAAM,EAAE,cAAc;EACtB,OAAO,EAAE,GAAG;EACZ,SAAS,EAAE,KAAK,GACjB;;AACD,AAAA,sBAAsB,CAAC,UAAU,CAAC;EAChC,KAAK,EAAE,IAAI,GAEZ;;AACD,AAAA,gBAAgB,CAAC;EACf,KAAK,EAAC,IAAI,GAIX;EALD,AAEE,gBAFc,CAEd,gBAAgB,CAAC;IC4Kf,YAAY,EAnID,IAAI;IAoIf,aAAa,EApIF,IAAI;IAsIf,KAAK,EAAE,SAAyB;IAChC,KAAK,EAAE,IAAI,GD9Kd"}